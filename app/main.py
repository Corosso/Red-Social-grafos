import streamlit as st
import networkx as nx
import matplotlib.pyplot as plt
from models.graph import SocialGraph
from utils.config import INTERESES_OPCIONES


def init_session_state():
    
    #Inicializa el estado de sesi√≥n de Streamlit.
    
    #Crea estructuras de datos para gestionar perfiles de usuarios,
    #colaboraciones entre ellos y la instancia del grafo social.
    
    if 'perfiles' not in st.session_state:
        
        #Ac√° creamos perfiles por defecto para que al correr el programa 
        #ya se pueda visualizar un grafo
        
        st.session_state['perfiles'] = {
        "Santiago Hern√°ndez": {
            "programa_academico": "Ingenier√≠a de Sistemas",
            "facultad": "Facultad de Ingenier√≠a",
            "nivel": "Pregrado",
            "habilidades_tecnicas": ["Programaci√≥n", "Bases de Datos"],
            "tipo": "Estudiante",
            "intereses": ["Proyectos Conjuntos", "Tutor√≠as"]
        },
        "Andres Sanchez": {
            "programa_academico": "Medicina",
            "facultad": "Facultad de Ciencias de la Salud",
            "nivel": "Pregrado",
            "habilidades_tecnicas": ["Anatom√≠a", "Fisiolog√≠a"],
            "tipo": "Estudiante",
            "intereses": ["Publicaciones"]
        },
        "Cristian Llano": {
            "programa_academico": "Derecho",
            "facultad": "Facultad de Ciencias Jur√≠dicas",
            "nivel": "Pregrado",
            "habilidades_tecnicas": ["Legislaci√≥n", "Investigaci√≥n Jur√≠dica"],
            "tipo": "Estudiante",
            "intereses": ["Trabajo de investigaci√≥n", "Ponencias"]
        },
        "Melisa Duran": {
            "programa_academico": "Arquitectura",
            "facultad": "Facultad de Arquitectura y Dise√±o",
            "nivel": "Pregrado",
            "habilidades_tecnicas": ["Dise√±o", "Construcci√≥n"],
            "tipo": "Estudiante",
            "intereses": ["Proyectos Conjuntos", "Tutor√≠as"]
        },
        "Lina Munera": {
            "programa_academico": "Doctorado en Econom√≠a",
            "facultad": "Ciencias Exactas",
            "nivel": "Posgrado",
            "habilidades_tecnicas": ["Investigaci√≥n", "Docencia"],
            "tipo": "Profesor",
            "intereses": ["Publicaciones"]
        },
        "Carolina Osorio": {
            "programa_academico": "Docencia",
            "facultad": "",
            "nivel": "Posgrado",
            "habilidades_tecnicas": ["Investigaci√≥n", "Docencia"],
            "tipo": "Profesor",
            "intereses": ["Trabajo de investigaci√≥n", "Ponencias"]
        },
        "Patricia Rinc√≥n": {
            "programa_academico": "Ingenier√≠a en Sistemas",
            "facultad": "Ingenier√≠a",
            "nivel": "Posgrado",
            "habilidades_tecnicas": ["Investigaci√≥n", "Docencia"],
            "tipo": "Profesor",
            "intereses": ["Proyectos Conjuntos", "Tutor√≠as"]
        },
        # üîπ Nuevos perfiles agregados
        "Laura G√≥mez": {
            "programa_academico": "Ciencias Pol√≠ticas",
            "facultad": "Facultad de Ciencias Sociales",
            "nivel": "Pregrado",
            "habilidades_tecnicas": ["An√°lisis de datos", "Pol√≠tica P√∫blica"],
            "tipo": "Estudiante",
            "intereses": ["Publicaciones"]
        },
        "Felipe Torres": {
            "programa_academico": "Biolog√≠a",
            "facultad": "Facultad de Ciencias Naturales",
            "nivel": "Pregrado",
            "habilidades_tecnicas": ["Gen√©tica", "Ecolog√≠a"],
            "tipo": "Estudiante",
            "intereses": ["Tesis"]
        },
        "Valeria Ruiz": {
            "programa_academico": "Psicolog√≠a",
            "facultad": "Facultad de Ciencias Humanas",
            "nivel": "Posgrado",
            "habilidades_tecnicas": ["Psicoterapia", "Investigaci√≥n"],
            "tipo": "Profesor",
            "intereses": ["Tesis"]
        }
    }
    #Ac√° creamos las colaboraciones que "relacionan" los datos iniciales
    if 'colaboraciones' not in st.session_state:
        st.session_state['colaboraciones'] = [
            ("Santiago Hern√°ndez", "Patricia Rinc√≥n"),
            ("Andres Sanchez", "Lina Munera"),
            ("Cristian Llano", "Carolina Osorio"),
            ("Melisa Duran", "Patricia Rinc√≥n"),
            ("Santiago Hern√°ndez", "Lina Munera"),
            ("Andres Sanchez", "Carolina Osorio"),
            ("Cristian Llano", "Patricia Rinc√≥n"),
            ("Laura G√≥mez", "Santiago Hern√°ndez"),  # Relaci√≥n entre estudiantes con inter√©s en publicaciones
            ("Felipe Torres", "Andres Sanchez"),  # Relaci√≥n entre estudiantes con inter√©s en tesis
            ("Valeria Ruiz", "Cristian Llano")  # Relaci√≥n entre estudiantes con inter√©s en tesis
        ]
    if 'graph' not in st.session_state:
        st.session_state['graph'] = SocialGraph()


def main():
    
    #Configura la interfaz de usuario en Streamlit y gestiona la red social acad√©mica.
    
    st.set_page_config(layout="wide")
    #Ac√° vamos a realizar los estilos de la p√°gina
    st.markdown(
    """
    <style>
        /* Fondo azul marino */
        .stApp {
            background-color: #1b263b; /* Azul marino oscuro */
            color: white !important;
        }

        /* T√≠tulos de TODOS los inputs */
        label, .stTextInput label, .stNumberInput label, .stSelectbox label, .stRadio label, .stMultiSelect label {
            font-family: 'Arial Black', sans-serif;
            color: white !important; /* Blanco para que resalten */
            text-transform: uppercase;
            font-weight: bold;
        }

        /* Inputs de texto y n√∫meros */
        input[type="text"], input[type="number"], textarea {
            background-color: #415a77 !important; /* Azul m√°s claro */
            color: white !important;
            border-radius: 5px;
            border: 2px solid #00c8ff !important; /* Borde azul claro */
        }

         /* Eliminar margen y padding de la p√°gina */
        .stApp {
            margin: 2px !important;
            padding: 2px !important;
        }

        /* Eliminar margen superior */
        header, .block-container {
            padding-top: 0,1px !important;
        }

        /* Placeholder de los inputs */
        input::placeholder, textarea::placeholder {
            color: #b0c4de !important; /* Azul claro */
        }

        /* Selectbox */
        div[data-baseweb="select"] {
            background-color: #415a77 !important;
            color: white !important;
            border: 2px solid #00c8ff !important;
            border-radius: 5px;
        }

        /* Opciones dentro del selectbox */
        div[data-baseweb="select"] * {
            color: white !important;
            background-color: #415a77 !important;
        }

        /* Botones */
        .stButton>button {
            background-color: #0077b6 !important;
            color: white !important;
            font-size: 16px;
            border-radius: 10px;
            font-weight: bold;
        }

        .stButton>button:hover {
            background-color: #005f99 !important;
        }

    </style>
    """,
    unsafe_allow_html=True
    )
    init_session_state()

    perfiles = st.session_state['perfiles']
    colaboraciones = st.session_state['colaboraciones']
    graph = st.session_state['graph']

    # Inicializar el grafo con los datos iniciales
    for nombre, datos in perfiles.items():
        graph.add_node(nombre, datos)
    for nodo1, nodo2 in colaboraciones:
        graph.add_edge(nodo1, nodo2)

    st.title("Red Social Acad√©mica")

    col1, col2 = st.columns([2, 3])

    with col1:

         # Secci√≥n para agregar un nuevo perfil al grafo
        st.header("Agregar Perfil")
         # Selecci√≥n del tipo de usuario (Estudiante o Profesor)
        tipo_usuario = st.selectbox("Tipo de usuario", ["Estudiante", "Profesor"])

        #Entradas de texto para cada atributo
        nombre = st.text_input("Nombre")
        
        programa_academico = st.text_input("Programa Acad√©mico (ej. Ingenier√≠a Civil, Medicina General)")
        
        facultad = st.text_input("Facultad")
        nivel = st.selectbox("Nivel", ["Pregrado", "Posgrado"])
        habilidades_tecnicas = st.text_area("Habilidades T√©cnicas (separadas por comas)", "")

        intereses_seleccionados = st.multiselect("Intereses", INTERESES_OPCIONES)
         # Si el usuario selecciona 'Etc.', se le permite especificar un nuevo inter√©s
        if intereses_seleccionados and intereses_seleccionados[-1] == 'Etc.':
            interes_etc = st.text_input("Especifique el inter√©s")
            if interes_etc:
                intereses_seleccionados[-1] = interes_etc

        # Bot√≥n para agregar o actualizar un nodo en el grafo
        if st.button("Agregar/Actualizar Nodo"):
            if nombre: # Verifica que el nombre no est√© vac√≠o
                perfiles[nombre] = {
                    'programa_academico': programa_academico,
                    'facultad': facultad,
                    'nivel': nivel,
                    'habilidades_tecnicas': habilidades_tecnicas.split(", "), # Convierte la cadena en una lista
                    'tipo': tipo_usuario,
                    'intereses': intereses_seleccionados
                }
                # Agregar el nodo al grafo con sus atributos
                graph.add_node(nombre, perfiles[nombre])
                st.success(f"Perfil de {nombre} agregado o actualizado.")
        
        # Secci√≥n para gestionar colaboraciones entre perfiles
        st.header("Gestionar Colaboraciones")
         # Selecci√≥n de los nodos (perfiles) que colaborar√°n
        nodo1 = st.selectbox("Nodo 1", list(perfiles.keys()), index=None)
        nodo2 = st.selectbox("Nodo 2", list(perfiles.keys()), index=None)

        # Bot√≥n para agregar una colaboraci√≥n entre dos nodos si no existe previamente
        if st.button("Agregar Colaboraci√≥n") and nodo1 and nodo2 and nodo1 != nodo2:
            if (nodo1, nodo2) not in colaboraciones and (nodo2, nodo1) not in colaboraciones:
                colaboraciones.append((nodo1, nodo2)) # Agregar la relaci√≥n a la lista de colaboraciones
                graph.add_edge(nodo1, nodo2) # Agregar la arista al grafo
                st.success(f"Colaboraci√≥n entre {nodo1} y {nodo2} agregada.")


        # Bot√≥n para eliminar una colaboraci√≥n existente entre dos nodos
        if st.button("Eliminar Colaboraci√≥n") and nodo1 and nodo2:
            if (nodo1, nodo2) in colaboraciones:
                colaboraciones.remove((nodo1, nodo2)) # Eliminar de la lista de colaboraciones
                graph.remove_edge(nodo1, nodo2) # Eliminar la arista del grafo
                st.success(f"Colaboraci√≥n entre {nodo1} y {nodo2} eliminada.")
            elif (nodo2, nodo1) in colaboraciones:
                colaboraciones.remove((nodo2, nodo1)) # Eliminar la relaci√≥n en el otro orden
                graph.remove_edge(nodo2, nodo1)
                st.success(f"Colaboraci√≥n entre {nodo2} y {nodo1} eliminada.")
            else:
                st.warning(f"No existe colaboraci√≥n entre {nodo1} y {nodo2}.")
        
        # Secci√≥n para buscar perfiles con intereses comunes
        st.header("Buscar Intereses Comunes")
        # Dropdown para seleccionar un inter√©s espec√≠fico (excluyendo la opci√≥n 'Etc.')
        interes_buscar = st.selectbox("Seleccione un inter√©s para buscar perfiles relacionados", 
                                     [i for i in INTERESES_OPCIONES if i != "Etc."])
        
        # Bot√≥n para realizar la b√∫squeda de perfiles relacionados con el inter√©s seleccionado
        if st.button("Buscar"):
            # Filtra el grafo seg√∫n el inter√©s seleccionado
            G_filtrado = graph.get_filtered_graph(interes_buscar, perfiles, colaboraciones)
            # Genera la visualizaci√≥n del grafo filtrado
            fig_filtrado = graph.draw_graph(G=G_filtrado)
            # Muestra el grafo filtrado en la interfaz
            st.pyplot(fig_filtrado)
        
        # Bot√≥n para restablecer la b√∫squeda y mostrar el grafo completo
        if st.button("Restablecer B√∫squeda"):
            fig_restablecido = graph.draw_graph() # Dibuja el grafo sin filtros
            st.pyplot(fig_restablecido)
        
        # Bot√≥n para detectar comunidades dentro del grafo
        if st.button("Detectar Comunidades"):
            comunidades = graph.detect_communities() # Identifica comunidades en el grafo
            fig_comunidades = graph.draw_graph(communities=True)  # Genera la visualizaci√≥n del grafo con las comunidades resaltadas
            st.pyplot(fig_comunidades)  # Muestra el grafo con las comunidades detectadas
            for comunidad, nodos in comunidades.items():  # Muestra las comunidades detectadas con los nodos que pertenecen a cada una
                st.write(f"La comunidad '{comunidad}' incluye los nodos: {', '.join(nodos)}")


    # Secci√≥n para mostrar la red de colaboraci√≥n
    with col2:
        st.header("Red de Colaboraci√≥n")
        # Genera la visualizaci√≥n del grafo con los nodos y conexiones actuales
        fig = graph.draw_graph()
        
        # Agrega una leyenda para distinguir entre estudiantes y profesores en el grafo
        fig.legend(handles=[
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='blue', markersize=10, label='Estudiantes'),
            plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='red', markersize=10, label='Profesores')
        ], loc='upper right')
        
        st.pyplot(fig)

        # Si se ha seleccionado un primer nodo, muestra su informaci√≥n detallada
        if nodo1:
            datos_nodo1 = perfiles[nodo1]  # Obtiene los datos del nodo seleccionado
            st.markdown(f"### INFORMACI√ìN DEL PRIMER NODO SELECCIONADO: \n\n**Nombre:** {nodo1}\n\n**Tipo:** {datos_nodo1['tipo']}\n\n**Programa Acad√©mico:** {datos_nodo1['programa_academico']}\n\n**Intereses:** {', '.join(datos_nodo1['intereses'])}")

        if nodo2:
            datos_nodo2 = perfiles[nodo2]  # Obtiene los datos del nodo seleccionado
            st.markdown(f"### INFORMACI√ìN DEL SEGUNDO NODO SELECCIONADO:\n\n**Nombre:** {nodo2}\n\n**Tipo:** {datos_nodo2['tipo']}\n\n**Programa Acad√©mico:** {datos_nodo2['programa_academico']}\n\n**Intereses:** {', '.join(datos_nodo2['intereses'])}")

    st.session_state['perfiles'] = perfiles  # Almacena el diccionario de perfiles en la sesi√≥n.
    st.session_state['colaboraciones'] = colaboraciones  # Guarda la lista de colaboraciones (conexiones entre nodos).
    st.session_state['graph'] = graph  # Guarda el grafo actualizado con los nodos y relaciones.

if __name__ == "__main__":
    main()